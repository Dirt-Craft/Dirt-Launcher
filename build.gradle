import org.apache.tools.ant.filters.ReplaceTokens
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io/' }
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.22.0'
    id 'java'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'java-library'

configurations {
    packaged
    provided
    implementation.extendsFrom(provided)
}

sourceCompatibility = 1.16
targetCompatibility = 1.16
def bootstrapJar = "Dirt-Bootstrap-Updater:$bootstrapVersion"
def outputJar = "${project.name}.jar"

javafx {
    version = "16"
    modules = [ 'javafx.controls',
                'javafx.web',
                'javafx.fxml' ]
}

jlink {
    launcher {
        name = 'DirtLauncher'
    }
}

application {
    mainModule = 'net.dirtcraft.dirtlauncher.Main'
    mainClass = 'net.dirtcraft.dirtlauncher.Main'
}
shadowJar {
    exclude 'META-INF/**'
    configurations = [project.configurations.provided]
    archiveFileName = outputJar
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io/' }
}

dependencies {
    packaged "com.github.Dirt-Craft:$bootstrapJar"

    provided fileTree(dir: 'src/main/libraries', include: '*.jar')
    provided group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.4'
    provided 'com.google.code.gson:gson:2.8.5'
    provided 'com.google.http-client:google-http-client:1.23.0'
    provided 'com.github.Cydhra:Nidhogg:1.3'
    provided 'com.google.guava:guava:28.0-jre'
    provided 'org.apache.commons:commons-lang3:3.9'
    provided 'commons-io:commons-io:2.6'
    provided 'com.github.Vatuu:discord-rpc:6233ef5'
    provided 'org.apache.commons:commons-compress:1.18'
    provided 'net.lingala.zip4j:zip4j:2.1.0'
    provided "org.tukaani:xz:1.8"
}


jar {
    archiveName = outputJar
    manifest {
        attributes(
                //'Class-Path': configurations.implementation.collect { it.getName() }.join(' '),
                'Main-Class': 'net.dirtcraft.dirtlauncher.Main'
        )
    }
    //from configurations.provided.asFileTree.files.collect {zipTree(it) }
    from configurations.packaged.copy()
}

task processSource(type: Sync) {
    from sourceSets.main.java
    inputs.properties(
            version: version,
            bootstrap: bootstrapJar)
    filter(ReplaceTokens, tokens: [
            VERSION  : version,
            BOOTSTRAP: bootstrapJar.replace(":", "-") + ".jar"])
    into "$buildDir/src"
}

compileJava {
    source = processSource.outputs
}

sourceSets.main {
    resources {
        srcDirs = ["src/main/resources"]
        includes = ["**/*.*"]
    }
}

compileJava.options.encoding = 'UTF-8'
