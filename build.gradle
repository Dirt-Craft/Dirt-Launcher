import org.apache.tools.ant.filters.ReplaceTokens
buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io/' }
        jcenter()
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'javafx-gradle-plugin'

configurations {
    packaged
    shaded
    compile.extendsFrom(shaded)
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
def bootstrapJar = "Dirt-Bootstrap-Updater:$bootstrapVersion"
def outputJar = "${project.name}.jar"

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io/' }
}

dependencies {
    packaged "com.github.Dirt-Craft:$bootstrapJar"

    shaded fileTree(dir: 'libraries', include: '*.jar')
    shaded 'com.github.Cydhra:Nidhogg:1.3'
    shaded 'com.google.guava:guava:28.0-jre'
    shaded 'com.google.code.gson:gson:2.8.5'
    shaded 'com.google.http-client:google-http-client:1.23.0'
    shaded 'org.apache.commons:commons-lang3:3.9'
    shaded 'org.apache.commons:commons-compress:1.18'
    shaded 'commons-io:commons-io:2.6'
    shaded 'club.minnced:java-discord-rpc:2.0.2'
    shaded 'net.lingala.zip4j:zip4j:2.1.0'
    shaded "org.tukaani:xz:1.8"
}


jar {
    archiveName = outputJar
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'net.dirtcraft.dirtlauncher.Main'
        )
    }
    from configurations.packaged.copy()
}

shadowJar {
    configurations = [project.configurations.shaded]
    archiveFileName = outputJar
    //minimize() todo: not break shit
}

jfx {
    // minimal requirement for jfxJar-task
    mainClass = 'net.dirtcraft.dirtlauncher.Main'
    css2bin = true

    // minimal requirement for jfxNative-task
    vendor = 'DirtCraft'
}

task processSource(type: Sync) {
    from sourceSets.main.java
    inputs.properties(
            version: version,
            bootstrap: bootstrapJar)
    filter(ReplaceTokens, tokens: [
            VERSION  : version,
            BOOTSTRAP: bootstrapJar.replace(":", "-") + ".jar"])
    into "$buildDir/src"
}

compileJava {
    source = processSource.outputs
}


sourceSets.main {
    resources {
        srcDirs = ["src/main/resources"]
        includes = ["**/*.*"]
    }
}

jfxJar.dependsOn(shadowJar)
build.dependsOn(shadowJar)
compileJava.options.encoding = 'UTF-8'
